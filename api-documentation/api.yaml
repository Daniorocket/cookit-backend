swagger: "2.0"
info:
  description: "This is API documentation of CookIt."
  version: "1.0.0"
  title: "CookIt"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "daniorocket@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "cookit0.herokuapp.com"
basePath: "/api"
tags:
- name: "auth"
  description: "Endpoints for authorization."
- name: "recipe"
  description: "Endpoints for recipe model."
- name: "category"
  description: "Endpoints for category model."
schemes:
- "http"
paths:
  /v1/rejestracja:
      post:
        tags:
        - "auth"
        summary: "Register user account"
        description: ""
        operationId: "register"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "User email, name and password."
          required: true
          schema:
            $ref: "#/definitions/Register"
        responses:
          "200":
            description: "created user account"
            schema:
              type: "object"
              properties:
                data:
                   type: "integer"
                   default: null
                status:
                  type: "string"
                  example: "success"
                code:
                  type: "integer"
                  example: 200
                error:
                  type: "string"
                  example: "none"
          "400":
            description: "Failed to create user account"
            schema:
              type: "object"
              properties:
                data:
                   type: "integer"
                   default: null
                status:
                  type: "string"
                  example: "failed"
                code:
                  type: "integer"
                  example: 400
                error:
                  type: "string"
                  example: "Invalid username or password"
  /v1/logowanie:
      post:
        tags:
        - "auth"
        summary: "Login"
        description: ""
        operationId: "login"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "User email, name and password. Username in body is nickname of user of his email."
          required: true
          schema:
            $ref: "#/definitions/Login"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "object"
              properties:
                data:
                  type: "object"
                  properties:
                    token:
                      type: "string"
                    expirationTime:
                      type: "string"
                      example: "2021-07-14 13:35:05.2878806 +0200 CEST"
                status:
                  type: "string"
                  example: "success"
                code:
                  type: "integer"
                  example: 200
                error:
                  type: "string"
                  example: "none"
          "400":
            description: "Invalid username supplied"
            schema:
              type: "object"
              properties:
                data:
                   default: null
                status:
                  type: "string"
                  example: "failed"
                code:
                  type: "integer"
                  example: 400
                error:
                  type: "string"
                  example: "Invalid username or password"
          "404":
            description: "User not found"
  /v1/odnow-token:
    get:
        tags:
        - "auth"
        summary: "Renew JSON Web Token"
        description: "This method renew JSON Web token. Requires authorization http header contains JWT."
        operationId: "renew"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "object"
              properties:
                data:
                  type: "object"
                  properties:
                    token:
                      type: "string"
                    expirationTime:
                      type: "string"
                      example: "2021-07-14 13:35:05.2878806 +0200 CEST"
                status:
                  type: "string"
                  example: "success"
                code:
                  type: "integer"
                  example: 200
                error:
                  type: "string"
                  example: "none"
          "400":
            description: "Invalid token"
            schema:
              type: "object"
              properties:
                data:
                   default: null
                status:
                  type: "string"
                  example: "failed"
                code:
                  type: "integer"
                  example: 400
                error:
                  type: "string"
                  example: "Invalid username or password"
        security:
        - token: []
  /v1/informacje-o-uzytkowniku:
    get:
        tags:
        - "auth"
        summary: "Get user info from JSON Web Token"
        description: "This method require authorization http header contains JSON Web Token."
        operationId: "getuserinfo"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "object"
              properties:
                data:
                  $ref: "#/definitions/User"
                status:
                  type: "string"
                  example: "success"
                code:
                  type: "integer"
                  example: 200
                error:
                  type: "string"
                  example: "none"
          "401":
            description: "Invalid token"
            schema:
              type: "object"
              properties:
                data:
                   default: null
                status:
                  type: "string"
                  example: "failed"
                code:
                  type: "integer"
                  example: 401
                error:
                  type: "string"
                  example: "Failed to authorize user"
        security:
        - token: []
  /v1/przypomnij-haslo:
    post:
        tags:
        - "auth"
        summary: "Send email for reset password"
        description: "This method in  body require user email. User dont receive information, if this email is valid(exists on db) or not. This is projected for better security. "
        operationId: "remindpassword"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "User email"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "daniorocket@gmail.com"
        responses:
          "200":
            description: "successful operation(independent if email is valid or not). If email is not valid, then email won't be sent."
            schema:
              type: "object"
              properties:
                data:
                   default: null
                status:
                  type: "string"
                  example: "success"
                code:
                  type: "integer"
                  example: 200
                error:
                  type: "string"
                  example: "none"
          "400":
            description: "Invalid email or json"
            schema:
              type: "object"
              properties:
                data:
                   default: null
                status:
                  type: "string"
                  example: "failed"
                code:
                  type: "integer"
                  example: 400
                error:
                  type: "string"
                  example: "Failed to validate email"
  /v1/przypomnij-haslo/{id}:   
    post:
          tags:
          - "auth"
          summary: "Change password"
          description: "This method is connected with /v1/przypomnij-haslo. If username from previous endpoint have unique email with id (link), he is able to change password on this endpoint. Id must be valid (uuidv4)"
          operationId: "resetpassword"
          consumes:
          - "application/json"
          produces:
          - "application/json"
          parameters:
          - in: "body"
            name: "body"
            description: "User email"
            required: true
            schema:
              type: "object"
              properties:
                password:
                  type: "string"
                  example: "zaq12wsx"
          - in: "path"
            name: "id"
            required: true
            description: "ID should be UUIDV4 string"
            type: "string"
          responses:
            "200":
              description: "successful operation"
              schema:
                type: "object"
                properties:
                  data:
                     default: null
                  status:
                    type: "string"
                    example: "success"
                  code:
                    type: "integer"
                    example: 200
                  error:
                    type: "string"
                    example: "none"
            "400":
              description: "error"
              schema:
                type: "object"
                properties:
                  data:
                     default: null
                  status:
                    type: "string"
                    example: "failed"
                  code:
                    type: "integer"
                    example: 400
                  error:
                    type: "string"
                    example: "can't reset your password"
  /v1/edytuj-konto:
      put:
        tags:
        - "auth"
        summary: "Edit user account"
        description: "This is endpoint for multiple form. If user wants to change his avatar, he send new avatar, using key 'file. If user wants to change his login for example, then he send on key 'json' new nickname. User can change more fields. If some field doesn't change, then don't send him in json."
        operationId: "edituserac"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Fields are not required. JSON is sent on key 'json'"
          required: false
          schema:
            $ref: "#/definitions/User"
        responses:
          "200":
            description: "successful operation"
        security:
        - token: []
  /v1/utworz-kategorie:
      post:
        tags:
        - "category"
        summary: "Add category"
        description: "This method require body and key  with name file, which will store an image. File is coded into Base64 and stored in DB."
        operationId: "addcategory"
        consumes:
         - "multipart/form-data"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "."
          required: true
          schema:
            type: "object"
            properties:
                name:
                  type: "string"
                  example: "Name of category"
        responses:
          "200":
            description: "Created category"
          "500":
            description: "Error decode JSON"
          "400":
            description: "Bad request"
        security:
        - token: []
  /v1/kategorie:
      get:
        tags:
        - "category"
        summary: "Get all categories"
        parameters:
        - in: "query"
          name: "page"
          description: ""
          required: true
          type: "integer"
        - in: "query"
          name: "limit"
          description: ""
          required: true
          type: "integer"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "object"
              properties:
                data:
                  type: "array"
                  items:
                    $ref: '#/definitions/Category'
                limit:
                  type: "string"
                  example: "1"
                page:
                  type: "string"
                  example: "1"
                totalElements:
                  type: "string"
                  example: "2"
  /v1/kategorie/{id}:
    get:
      tags:
      - "category"
      summary: "Get category by ID"
      description: "This method return single category object with passed ID."
      operationId: "getcategory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          description: "ID should be UUIDV4 string"
          type: "string"
      responses:
          "200":
            description: "successful operation"
            schema:
              $ref: "#/definitions/Category"
  /v1/utworz-przepis:
      post:
        tags:
        - "recipe"
        summary: "Add recipe"
        description: "This method require body and key  with name file, which will store an image. File is coded into Base64 and stored in DB. Field difficulty is from 1 to 3. 1-easy 2-medium 3-hard"
        operationId: "addrecipe"
        consumes:
         - "multipart/form-data"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/Recipe"
        responses:
          "200":
            description: "Successful operation"
          "400":
            description: "Bad request"
        security:
        - token: []

  /v1/przepisy:
    get:
      tags:
      - "recipe"
      summary: "Get all recipes with filter"
      description: "This method allow to get all recipe byname or categories id table. Name can be substring. Required keys page and limit for pagination. Body can be clear, and name not required - then will be returned all recipes."
      operationId: "getallrecipesbytags"
      produces:
        - "application/json"
      parameters:
      - in: "query"
        name: "page"
        description: ""
        required: true
        type: "integer"
      - in: "query"
        name: "limit"
        description: ""
        required: true
        type: "integer"
      - in: "query"
        name: "name"
        description: ""
        required: false
        type: "string"
      - in: "query"
        name: "categories"
        description: ""
        required: false
        type: "string"
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
  /v1/przepis/{id}:
    get:
      tags:
      - "recipe"
      summary: "Get recipe by ID"
      description: "This method return single category object with passed ID."
      operationId: "getcategory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          description: "ID should be UUIDV4 string"
          type: "string"
      responses:
          "200":
            description: "successful operation"
            schema:
              $ref: "#/definitions/Recipe"
  /v1/jednostki:
    get:
      tags:
      - "recipe"
      summary: "Get all units used in recipes"
      description: "This method allow to get all units used in recipes."
      operationId: "getunits"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
              type: "object"
              properties:
                data:
                  type: "array"
                  items:
                    $ref: '#/definitions/Units'
                status:
                  type: "string"
                  example: "success"
                code:
                  type: "integer"
                  example: "200"
                error:
                  type: "string"
                  example: "none"
        "400":
          description: "Bad request"
definitions:
  Register:
      type: "object"
      properties:
        email:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
  User:
    type: "object"
    properties:
        id:
          type: "string"
        username:
          type: "string"
          example: ""
        avatarURL: 
          type: "string"
        email: 
          type: "string"
        description: 
          type: "string"
  Login:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
  Category:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        file:
          $ref: "#/definitions/File"
  File:
      type: "object"
      properties:
        encodedURL:
          type: "string"
        extension:
          type: "string"
  Indegredients:
      type: "object"
      properties:
        id:
          type: "string"
          example: "2"
        name:
          type: "string"
          example: "Papryka"
        count:
          type: "string"
          example: 50
        unitID:
          type: "string"
          example: 4
  Units:
      type: "object"
      properties:
        id:
          type: "string"
          example: "1"
        name:
          type: "string"
          example: "kilogram"
        symbol:
          type: "string"
          example: "kg"
  Recipe:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Kurczak słodko-kwasny"
      steps:
        type: "array"
        items:
          type: "string"
          example: ["Pokrój warzywa","Podgrzej wodę przez 15 minut"]
      difficulty:
        type: "integer"
        example: 2
      categoriesID:
        type: "array"
        items:
          type: "string"
          example: ["7481603a-9451-47fc-97f9-f0280c8722b3","5481603a-9451-47fc-97f9-f0280c8722b3"]
      ingredients:
        type: "object"
        properties:
          name:
            type: "string"
            example: "Sol"
          count:
            type: "integer"
            example: 25
          unitID:
            type: "string"
      description:
        type: "string"
      preparingTime:
        type: "string"
      file:
          $ref: "#/definitions/File"
  ApiResponse:
    type: "object"
    properties:
      data:
        description: Can be any value - string, number, boolean, array or object.
      status:
        type: "string"
        description: Value success or failed
      code:
        type: "integer"
        description: Value is equal to code in response HTTP
      error:
        type: "string"
        description: Message of error. none - when status is success
securityDefinitions:
  token:
    type: "basic"